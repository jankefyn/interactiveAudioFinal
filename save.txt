import { MongoClient, Db, ObjectId } from 'mongodb';

interface Location {
  _id: ObjectId;
  name: string;
  latitude: number;
  longitude: number;
  soundUrl: string;
}

let locations: Location[] = [];



// Function to insert a location into the database
async function insertLocation(name: string, latitude: number, longitude: number, soundUrl: string): Promise<void> {
  const uri = 'mongodb+srv://FynnJ:nicnjX5MjRSm4wtu@gis-ist-geil.wb5k5.mongodb.net/?retryWrites=true&w=majority';
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Connected to MongoDB');

    const db: Db = client.db('Interactive_Audio');
    const locationsCollection = db.collection('locations');

    const location = {
      name,
      latitude,
      longitude,
      soundUrl,
    };

    // Insert the location document
    await locationsCollection.insertOne(location);
    console.log('Location inserted successfully');
  } catch (error) {
    console.error('Error inserting location', error);
  } finally {
    await client.close();
    console.log('Disconnected from MongoDB');
  }
}

// Function to retrieve locations from the database
async function getLocations(): Promise<Location[]> {
  const uri = 'mongodb+srv://FynnJ:nicnjX5MjRSm4wtu@gis-ist-geil.wb5k5.mongodb.net/?retryWrites=true&w=majority';
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Connected to MongoDB');

    const db: Db = client.db('Interactive_Audio');
    const locationsCollection = db.collection('locations');

    // Retrieve all documents from the collection
    const documents = await locationsCollection.find().toArray();

    // Map the MongoDB documents to the Location interface
    const locations: Location[] = documents.map((document: any) => ({
      _id: document._id,
      name: document.name,
      latitude: document.latitude,
      longitude: document.longitude,
      soundUrl: document.soundUrl,
    }));

    console.log('Retrieved locations:', locations);
    return locations;
  } catch (error) {
    console.error('Error retrieving locations', error);
    return [];
  } finally {
    await client.close();
    console.log('Disconnected from MongoDB');
  }
}

// Usage example
console.log(getLocations());



document.addEventListener('DOMContentLoaded', function() {
  const saveLocationButton = document.getElementById('saveLocationButton');

  if (saveLocationButton) {
    saveLocationButton.addEventListener('click', saveLocation);
  }

  async function saveLocation() {
    

    await insertLocation("asdf",2,3,"asdf");
  }
});



//functionality













let startButton = document.getElementById("startButton");
startButton.addEventListener("click", startGame);




let musicPlaying: boolean = false;
let currentsound: string = "";
let lastLocation: string = "";


window.AudioContext = window.AudioContext || window.webkitAudioContext;
let audioContext: AudioContext;

let audioBufferMap: Map<string, AudioBuffer> = new Map();
let audioSourceMap: Map<string, AudioBufferSourceNode> = new Map();

const currentCoordinates: HTMLParagraphElement = <HTMLParagraphElement>document.getElementById("currentCoordinates");
const options = {
  enableHighAccuracy: true,
  maximumAge: 0,
};







async function startGame(): Promise<void> {
  startButton.classList.add("hidden");

  locations = await getLocations();
  audioContext = new AudioContext();
  for (let location of locations) {
    loadSound(location.soundUrl);
  }
  if ("geolocation" in navigator) {
    /* geolocation is available */
    navigator.geolocation.watchPosition(success, error, options);

  } else {
    /* geolocation IS NOT available */
    currentCoordinates.textContent = "coordinates not available";
  }
}


function success(_pos: GeolocationPosition): void {
  currentCoordinates.textContent = "" + _pos.coords.latitude + ", " + _pos.coords.longitude;
  currentCoordinates.textContent = currentCoordinates.textContent + "distanz zum ziel" + checkDistanceBetween(_pos, 47.579136, 7.6218368);
  checkForLocations(_pos);
}

function checkForLocations(_currentCoordinates: GeolocationPosition): void {
  for (let location of locations) {
    let d: number = checkDistanceBetween(_currentCoordinates, location.latitude, location.longitude);
    if (!musicPlaying) {
      if (d < 1.5) {

        playAudioFromFile(location.soundUrl, true);
        musicPlaying = true;
        currentsound = location.soundUrl;
        lastLocation = location.soundUrl;
        currentCoordinates.textContent = " du befindest dich in der nähe von: " + location.name + " deshalb hörst du etwas."

        break;
      }
    }
    if (musicPlaying && location.name === lastLocation && d > 10) {
      console.log("ich brech ab");
      stopAudio();
      musicPlaying = false;
    }
  }
}

let sourceNode: AudioBufferSourceNode | null = null;

function playAudioFromFile(filePath: string, loop: boolean = false): void {
  const audioContext = new AudioContext();

  fetch(filePath)
    .then(response => response.arrayBuffer())
    .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer))
    .then(audioBuffer => {
      sourceNode = audioContext.createBufferSource();
      sourceNode.buffer = audioBuffer;
      if (loop) {
        sourceNode.loop = true;
        sourceNode.loopEnd = audioBuffer.duration;
      }
      sourceNode.connect(audioContext.destination);
      sourceNode.start();
    })
    .catch(error => {
      console.error('Error loading audio:', error);
    });
}

function stopAudio(): void {
  if (sourceNode) {
    sourceNode.stop();
    sourceNode.disconnect();
    sourceNode = null;
  }
}

function checkDistanceBetween(_pos: GeolocationPosition, _lat: number, _long: number) {
  let R: number = 6371; // Radius of the earth in km
  let dLat: number = deg2rad(_lat - _pos.coords.latitude);  // deg2rad below
  let dLon: number = deg2rad(_long - _pos.coords.longitude);
  let a: number = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(_pos.coords.latitude)) * Math.cos(deg2rad(_lat)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  var d = R * c; // Distance in km
  return d;
}

function deg2rad(deg: number) {
  return deg * (Math.PI / 180)
}

function error(): void {
  alert("error");
}






async function loadSound(_url: string): Promise<void> {
  let response: Response = await fetch(_url);
  let arraybuffer: ArrayBuffer = await response.arrayBuffer();
  let audioBuffer: AudioBuffer = await audioContext.decodeAudioData(arraybuffer);
  audioBufferMap.set(_url, audioBuffer);
}



